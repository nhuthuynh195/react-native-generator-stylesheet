{"version":3,"sources":["webpack://react-native-generator-stylesheet/./src/extension.ts","webpack://react-native-generator-stylesheet/external \"vscode\"","webpack://react-native-generator-stylesheet/webpack/bootstrap","webpack://react-native-generator-stylesheet/webpack/startup"],"names":["commands","Position","window","vscode","formatStyles","styles","replace","split","map","item","trim","length","style","padStart","join","context","disposable","registerCommand","activeTextEditor","showInputBox","showInformationMessage","userStylesName","prompt","document","selection","editorCode","getText","stylesText","userStylesSelection","row","lineCount","edit","includes","positionAt","indexOf","line","styleName","withStyleSheetCreate","insert","subscriptions","push","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","call"],"mappings":"y9BAAA,mBAEM,SAAEA,EAAQ,SAAEC,EAAQ,OAAEC,GAAWC,EAUvC,SAASC,EAAaC,GAWpB,MAAO,CAAC,IAVYA,EACjBC,QAAQ,IAAK,IACbA,QAAQ,IAAK,IACbC,MAAM,KACNC,KAAKC,IACJ,GAAIA,EAAKC,OAAOC,OAAS,EACvB,OAXgCC,EAWMH,EAAO,KAVtCC,OAAOG,SAASD,EAAMD,OAAS,EAAG,KADjD,IAAwCC,KAcnCE,KAAK,MACkBJ,OAAS,OAAOI,KAAK,MAGjD,oBAAyBC,GACvB,MAAMC,EAAahB,EAASiB,gBAC1B,gDACA,IAAY,EAAD,gCACT,MAAM,iBAAEC,EAAgB,aAAEC,EAAY,uBAAEC,GAA2BlB,EACnE,IAAKgB,EACH,OAGF,MAAMG,QAAuBF,EAAa,CACxCG,OAAQ,8BAEV,IAAKD,EAIH,YAHAD,EACE,4DAKJ,MAAM,SAAEG,EAAQ,UAAEC,GAAcN,EAE1BO,EAAaF,EAASG,UACtBC,EAAaJ,EAASG,QAAQF,GACpC,IAAKG,EAIH,YAHAP,EACE,2DAKJ,IAAIQ,EAAsBxB,EAAauB,GACnCE,EAAMN,EAASO,UAAY,EAE/BZ,EAAiBa,MAAMA,IACIN,EAAWO,SAAS,sBAE3CH,EAAMN,EAASU,WACbR,EAAWS,QAAQ,sBACnBC,KACFP,EAAsB,KAAKP,MAAmBjB,EAC5CuB,SAGFC,EAjEV,SAA8BQ,EAAmBT,GAC/C,MAAO,2CAA2CS,MAAcT,SAgElCU,CACpBhB,EACAjB,EAAauB,IAIjBI,EAAKzB,QAAQkB,EAAW,UAAUH,KAClCU,EAAKO,OAAO,IACTrC,EAAS4B,EAAMA,EAAM,EAAIA,EAAK,GAAID,WAK3Cb,EAAQwB,cAAcC,KAAKxB,K,QClF7ByB,EAAOC,QAAUC,QAAQ,YCCrBC,EAA2B,GCE/B,ODCA,SAASC,EAAoBC,GAE5B,GAAGF,EAAyBE,GAC3B,OAAOF,EAAyBE,GAAUJ,QAG3C,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,IAOV,OAHAK,EAAoBD,GAAUE,KAAKP,EAAOC,QAASD,EAAQA,EAAOC,QAASG,GAGpEJ,EAAOC,QCjBRG,CAAoB,M","file":"extension.js","sourcesContent":["import * as vscode from \"vscode\";\n\nconst { commands, Position, window } = vscode;\n\nfunction withStyleSheetCreate(styleName: string, stylesText: string) {\n  return `\\nconst styles = StyleSheet.create({\\n  ${styleName}: ${stylesText},\\n})`;\n}\n\nfunction addIdentationToIndividualStyle(style: string) {\n  return style.trim().padStart(style.length + 4, \" \");\n}\n\nfunction formatStyles(styles: string) {\n  const stylesLines = styles\n    .replace(\"{\", \"\")\n    .replace(\"}\", \"\")\n    .split(\",\")\n    .map((item) => {\n      if (item.trim().length > 0) {\n        return addIdentationToIndividualStyle(item + \",\");\n      }\n    })\n    .join(\"\\n\");\n  return [\"{\" + stylesLines.trim() + \"  }\"].join(\"\\n\");\n}\n\nexport function activate(context: vscode.ExtensionContext) {\n  const disposable = commands.registerCommand(\n    \"react-native-generator-stylesheet.helloWorld\",\n    async () => {\n      const { activeTextEditor, showInputBox, showInformationMessage } = window;\n      if (!activeTextEditor) {\n        return;\n      }\n\n      const userStylesName = await showInputBox({\n        prompt: \"Please insert styles name\",\n      });\n      if (!userStylesName) {\n        showInformationMessage(\n          \"react-native-generator-stylesheet expects the style name\"\n        );\n        return;\n      }\n\n      const { document, selection } = activeTextEditor;\n\n      const editorCode = document.getText();\n      const stylesText = document.getText(selection);\n      if (!stylesText) {\n        showInformationMessage(\n          \"react-native-generator-stylesheet styles to be selected\"\n        );\n        return;\n      }\n\n      let userStylesSelection = formatStyles(stylesText);\n      let row = document.lineCount + 1;\n\n      activeTextEditor.edit((edit) => {\n        const hasStylesDefined = editorCode.includes(`StyleSheet.create`);\n        if (hasStylesDefined) {\n          row = document.positionAt(\n            editorCode.indexOf(\"StyleSheet.create\")\n          ).line;\n          userStylesSelection = `  ${userStylesName}: ${formatStyles(\n            stylesText\n          )},\\n`;\n        } else {\n          userStylesSelection = withStyleSheetCreate(\n            userStylesName,\n            formatStyles(stylesText)\n          );\n        }\n\n        edit.replace(selection, `styles.${userStylesName}`);\n        edit.insert(new\n           Position(row ? row + 1 : row, 0), userStylesSelection);\n      });\n    }\n  );\n\n  context.subscriptions.push(disposable);\n}\n","module.exports = require(\"vscode\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(112);\n"],"sourceRoot":""}